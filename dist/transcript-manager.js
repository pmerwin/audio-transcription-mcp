/**
 * Transcript file management
 */
import fs from "fs";
export class TranscriptManager {
    outfile;
    version;
    constructor(outfile, version) {
        this.outfile = outfile;
        this.version = version;
    }
    /**
     * Initialize the transcript file with a header if it doesn't exist
     */
    initialize() {
        if (!fs.existsSync(this.outfile)) {
            const now = new Date().toISOString().replace("T", " ").split(".")[0];
            const versionInfo = this.version ? `\n_Generated by audio-transcription-mcp v${this.version}_\n` : "";
            const header = `# Meeting Transcript\n${versionInfo}_Started: ${now}_\n\n---\n\n`;
            fs.writeFileSync(this.outfile, header, "utf8");
        }
    }
    /**
     * Append a transcript entry to the file
     */
    append(entry) {
        const line = `\n**${entry.timestamp}**  ${entry.text}\n`;
        fs.appendFileSync(this.outfile, line, "utf8");
    }
    /**
     * Append a system notification to the transcript (e.g., pause/resume)
     */
    appendSystemMessage(message) {
        const now = new Date();
        const timestamp = now.toISOString().replace("T", " ").split(".")[0];
        const line = `\n---\n**${timestamp}** _[SYSTEM]_ ${message}\n---\n\n`;
        fs.appendFileSync(this.outfile, line, "utf8");
    }
    /**
     * Get the full transcript content
     */
    getContent() {
        if (!fs.existsSync(this.outfile)) {
            return "";
        }
        return fs.readFileSync(this.outfile, "utf8");
    }
    /**
     * Clear the transcript file
     */
    clear() {
        if (fs.existsSync(this.outfile)) {
            fs.unlinkSync(this.outfile);
        }
        this.initialize();
    }
    /**
     * Delete the transcript file completely (no reinitialization)
     */
    delete() {
        if (fs.existsSync(this.outfile)) {
            fs.unlinkSync(this.outfile);
        }
    }
    /**
     * Get file path
     */
    getFilePath() {
        return this.outfile;
    }
}
//# sourceMappingURL=transcript-manager.js.map